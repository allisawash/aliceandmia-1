{"version":3,"sources":["../node_modules/accoutrement-init/sass/_root.scss","../node_modules/accoutrement-init/sass/_a11y.scss","screen.css","../node_modules/accoutrement-init/sass/_forms.scss","../node_modules/accoutrement-init/sass/_media.scss","../node_modules/accoutrement-init/sass/_typography.scss","initial/_root.scss","../node_modules/accoutrement-type/sass/_fonts.scss","config/_fonts.scss","../node_modules/accoutrement-color/sass/_utils.scss","config/_scale.scss","../node_modules/accoutrement-scale/sass/_units.scss","config/_color.scss","../node_modules/accoutrement-scale/sass/_math.scss","layout/_header.scss","layout/_nav.scss","../node_modules/accoutrement-scale/sass/_size.scss"],"names":[],"mappings":"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","file":"screen.css","sourcesContent":["// Root Init\n// =========\n\n\n/// Prevent iOS and IE text size adjust after device orientation change.\n///\n/// - Overflow-style: Edge 12+, Internet Explorer 11-\n/// @group general\nhtml {\n  -ms-overflow-style: -ms-autohiding-scrollbar; // sass-lint:disable-line no-vendor-prefixes\n  text-size-adjust: 100%;\n}\n\n\n/// - Android 4.3-\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group general\nmain {\n  display: block;\n}\n\n\n/// - Edge 12+\n/// - Firefox 40+\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group general\ndetails {\n  display: block;\n}\n\n\n/// Internet Explorer 11-\n/// @group general\npre {\n  overflow: auto;\n}\n\n\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group general\nprogress {\n  display: inline-block;\n}\n\n\n/// - Firefox 40+\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group general\nsummary {\n  display: block;\n}\n\n\n/// - Android 4.3-\n/// - Internet Explorer 11-\n/// - iOS 7-\n/// - Safari 7-\n/// - Windows Phone 8.1+\n/// @group general\ntemplate {\n  display: none;\n}\n\n\n/// Specify the border style, width, and box-sizing of all elements.\n/// @group general\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n  box-sizing: border-box;\n}\n\n\n/// Specify the core styles of all elements.\n/// @group general\n* {\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n\n/// Specify the border styling of tables.\n/// @group general\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n","// Accessibility Init\n// ==================\n\n\n/// Chrome 44-, iOS 8+, Safari 9+\n/// @group a11y\naudio {\n  :not([controls]) {\n    display: none;\n  }\n}\n\n\n/// Specify the progress cursor of updating elements.\n/// @group a11y\n[aria-busy='true'] {\n  cursor: progress;\n}\n\n\n/// Specify the pointer cursor of trigger elements.\n/// @group a11y\n[aria-controls] {\n  cursor: pointer;\n}\n\n\n/// Specify the unstyled cursor of disabled,\n/// not-editable, or otherwise inoperable elements.\n/// @group a11y\n[aria-disabled] {\n  cursor: default;\n}\n\n\n/// Internet Explorer 10-\n/// @group a11y\n[hidden] {\n  display: none;\n}\n","html {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  text-size-adjust: 100%; }\n\nmain {\n  display: block; }\n\ndetails {\n  display: block; }\n\npre {\n  overflow: auto; }\n\nprogress {\n  display: inline-block; }\n\nsummary {\n  display: block; }\n\ntemplate {\n  display: none; }\n\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n  box-sizing: border-box; }\n\n* {\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\naudio :not([controls]) {\n  display: none; }\n\n[aria-busy='true'] {\n  cursor: progress; }\n\n[aria-controls] {\n  cursor: pointer; }\n\n[aria-disabled] {\n  cursor: default; }\n\n[hidden] {\n  display: none; }\n\nbutton {\n  overflow: visible; }\n\ninput {\n  border-radius: 0;\n  line-height: normal; }\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  appearance: button;\n  cursor: pointer; }\n  button::-moz-focus-inner,\n  [type='button']::-moz-focus-inner,\n  [type='reset']::-moz-focus-inner,\n  [type='submit']::-moz-focus-inner {\n    border: 0 none !important;\n    padding: 0 !important; }\n\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0; }\n\n[type='number'] {\n  width: auto; }\n\n[type='search'] {\n  appearance: textfield; }\n\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit; }\n\ntextarea {\n  overflow: auto;\n  resize: vertical; }\n\nimg {\n  border: 0; }\n\nsvg:not(:root) {\n  overflow: hidden; }\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  max-width: 100%;\n  vertical-align: middle; }\n\na {\n  background-color: transparent; }\n  a:active, a:hover {\n    outline: 0; }\n\nabbr[title] {\n  border-bottom: 1px dotted; }\n\nb,\nstrong {\n  font-weight: bold; }\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: inherit; }\n\ndfn {\n  font-style: italic; }\n\nnav ol,\nnav ul {\n  list-style: none; }\n\nsmall {\n  font-size: 0.75em; }\n\nsub,\nsup {\n  font-size: 0.75em;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsup {\n  top: -0.5em; }\n\nsub {\n  bottom: -0.25em; }\n\n:root {\n  font-family: \"freight-text-pro\", \"Baskerville\", \"Palatino\", \"Cambria\", \"Georgia\", serif;\n  color: #173c48;\n  font-size: 24px;\n  font-size: calc(100% + 0.675vw); }\n\nbody {\n  line-height: 1.4;\n  padding: 1.4rem; }\n\n.amp {\n  font-family: \"Baskerville\", \"Palatino\", \"Cambria\", \"Georgia\", serif;\n  font-style: italic;\n  font-weight: normal; }\n\na, a:link, a:visited {\n  color: #ac0056;\n  cursor: pointer;\n  outline: none;\n  text-decoration: underline;\n  text-decoration-color: #b3c9d0;\n  text-decoration-skip: ink;\n  transition: color 350ms, text-decoration-color 300ms; }\n\na:focus, a:hover, a:active {\n  color: #266478;\n  text-decoration-color: currentColor; }\n\nsvg {\n  fill: currentColor; }\n\np,\nul,\nol,\ndl {\n  margin-bottom: 0.7rem; }\n\n[data-layout='header'] a,\n[data-layout='nav'] a {\n  text-decoration: none; }\n\n[data-layout='header'] {\n  font-size: calc(2rem + 1.5vw);\n  line-height: 1em;\n  margin-bottom: -0.25em;\n  text-align: center; }\n  [data-layout='header'] a:link, [data-layout='header'] a:visited {\n    color: #173c48; }\n  [data-layout='header'] a:focus, [data-layout='header'] a:hover, [data-layout='header'] a:active {\n    color: #ac0056; }\n  [data-layout='header'] .amp {\n    display: inline-block;\n    font-size: 1.5em;\n    margin-left: -0.125em;\n    vertical-align: middle; }\n\n[data-layout='nav'] {\n  padding-bottom: 1.4rem;\n  text-align: center; }\n\n[data-nav] {\n  display: inline-block;\n  font-size: 0.84515rem;\n  font-style: italic;\n  padding: 0.175rem 0.7rem; }\n  [data-nav] + [data-nav] {\n    margin-left: calc(2rem + 1.5vw); }\n\n[data-location='writing'] [data-nav='writing'] {\n  color: #173c48;\n  text-decoration: underline; }\n\n[data-location='podcast'] [data-nav='podcast'] {\n  color: #173c48;\n  text-decoration: underline; }\n","// Forms Init\n// ==========\n\n\n/// Internet Explorer 11-\n/// @group forms\nbutton {\n  overflow: visible;\n}\n\n\n/// - Border-radius: iOS 8+ |\n/// - Line-height: Firefox 4+\n/// @group forms\ninput {\n  border-radius: 0;\n  line-height: normal;\n}\n\n\n/// Appearance, cursors, and inner-focus\n/// for buttons and button-like inputs.\n///\n/// - Appearance: iOS 8+\n/// @group forms\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  appearance: button;\n  cursor: pointer;\n\n  // sass-lint:disable no-vendor-prefixes, no-important\n  &::-moz-focus-inner {\n    border: 0 none !important;\n    padding: 0 !important;\n  }\n}\n\n\n/// Address box sizing set to `content-box` in IE 8/9/10.\n/// Remove excess padding in IE 8/9/10.\n/// @group forms\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n\n/// Firefox 36+\n/// @group forms\n[type='number'] {\n  width: auto;\n}\n\n\n/// Chrome 45+, Safari 9+\n/// @group forms\n[type='search'] {\n  appearance: textfield;\n}\n\n\n/// Specify the background-color,\n/// and the inherited color/font of form elements.\n/// @group forms\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n}\n\n\n/// Remove default vertical scrollbar in IE 8/9/10/11,\n/// and specify the resizability of textareas.\n/// @group forms\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n","// Media Init\n// ==========\n\n\n/// Remove border when inside `a` element in IE 8/9/10.\n/// @group media\nimg {\n  border: 0;\n}\n\n\n/// Internet Explorer 11-\n/// @group media\nsvg {\n  &:not(:root) {\n    overflow: hidden;\n  }\n}\n\n\n/// Specify the alignment of media elements.\n/// @group media\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  max-width: 100%;\n  vertical-align: middle;\n}\n","// Typography Init\n// ===============\n\n\n/// Remove the gray background color from active links in IE 10.\n/// Improve readability of focused elements\n/// when they are also in an active/hover state.\n/// @group type\na {\n  background-color: transparent;\n\n  &:active,\n  &:hover {\n    outline: 0;\n  }\n}\n\n\n/// Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n/// @group type\nabbr {\n  &[title] {\n    border-bottom: 1px dotted;\n  }\n}\n\n\n/// Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n/// @group type\nb,\nstrong {\n  font-weight: bold;\n}\n\n\n/// Specify the font family of code elements.\n/// @group type\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: inherit;\n}\n\n\n/// Address styling not present in Safari and Chrome.\n/// @group type\ndfn {\n  font-style: italic;\n}\n\n\n/// Remove list style of nav lists.\n/// @group type\nnav {\n  ol,\n  ul {\n    list-style: none;\n  }\n}\n\n\n/// All browsers…\n/// @group type\nsmall {\n  font-size: 0.75em;\n}\n\n\n/// Prevent `sub` and `sup` affecting `line-height` in all browsers.\n/// @group type\nsub,\nsup {\n  font-size: 0.75em;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n\n/// Move super-script up.\n/// @group type\nsup {\n  top: -0.5em;\n}\n\n\n/// Move sub-script down.\n/// @group type\nsub {\n  bottom: -0.25em;\n}\n","// Root\n// ====\n\n\n:root {\n  @include font-family('body');\n  color: color('text');\n  font-size: size('root');\n  font-size: size('responsive'); // sass-lint:disable-line no-duplicate-properties\n}\n\n\nbody {\n  line-height: ratio('text-ratio');\n  padding: size('gutter');\n}\n\n\n.amp {\n  font-family: map-get($body-font, 'stack');\n  font-style: italic;\n  font-weight: normal;\n}\n\n\na {\n  &,\n  &:link,\n  &:visited {\n    color: color('action');\n    cursor: pointer;\n    outline: none;\n    text-decoration: underline;\n    text-decoration-color: color('border');\n    text-decoration-skip: ink;\n    transition: color 350ms, text-decoration-color 300ms;\n  }\n\n  &:focus,\n  &:hover,\n  &:active {\n    color: color('action-hover');\n    text-decoration-color: currentColor;\n  }\n}\n\n\nsvg {\n  fill: currentColor;\n}\n\n\np,\nul,\nol,\ndl {\n  margin-bottom: size('shim');\n}\n","// Fonts API\n// =========\n\n\n// Font-URL [function]\n// -------------------\n/// Get a CSS-ready URL function (`url('my/path')`) with\n/// the full path to a file in the fonts directory.\n/// @group fonts\n/// @param {string} $path -\n///   A path relative to the fonts directory.\n/// @return {String} -\n///   The full path to a font file, in CSS `url('my/path')` format.\n@function font-url(\n  $path\n) {\n  $full-path: quote($font-path + $path);\n  @return url($full-path);\n}\n\n\n// Font Family [function]\n// ----------------------\n/// Access a font-family from your `$fonts` map.\n/// @group fonts\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @return {String} -\n///   The full font-stack for the given font,\n///   ready for output with the `font-family` property.\n@function font-family(\n  $key\n) {\n  $font: map-get($fonts, $key);\n  $name: map-get($font, 'name') or $key;\n  @return join($name, map-get($font, 'stack'), 'comma');\n}\n\n\n// Font Family [mixin]\n// -------------------\n/// Output a font-stack to font-family based on your `$fonts` configuration.\n/// @group fonts\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n@mixin font-family(\n  $key\n) {\n  font-family: font-family($key);\n}\n\n\n// Font Face [mixin]\n// -----------------\n/// Import any local webfont defined in your `$fonts` configuration\n/// (variants without a path will not be imported).\n/// @group fonts\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {list} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin font-face(\n  $key,\n  $formats: $font-formats\n) {\n  $var-options: join($_font-style-options, $_font-weight-options);\n  $var-options: join($var-options, ('normal', 'regular'));\n  $font: _font-get($key);\n  $name: $key;\n  $variants: ();\n\n  @each $key, $value in $font {\n    $first: nth($key, 1);\n\n    @if ($first == 'name') {\n      $name: $value;\n    } @else if index($var-options, $first) {\n      $variants: map-merge($variants, ($key: $value));\n    }\n  }\n\n  @if (length($variants) > 0) {\n    @each $variant, $path in $variants {\n      $variant: if(($variant == 'regular'), 'normal', $variant);\n\n      @if $path {\n        @include _import-font-face($name, $path, $variant, $formats);\n      }\n    }\n  }\n}\n\n\n// Import WebFonts [mixin]\n// -----------------------\n/// Import webfonts from your font config list.\n/// @group fonts\n/// @param {map} $fonts [$fonts] -\n///   A map of your font configuration.\n/// @param {list} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin import-webfonts(\n  $fonts: $fonts,\n  $formats: $font-formats\n) {\n  @each $key, $value in $fonts {\n    @if type-of($value) == 'map' {\n      @include font-face($key, $font-formats);\n    }\n  }\n}\n","// Fonts Config\n// ============\n\n\n// Body Font\n// ---------\n/// Freight Text Pro is the primary font of the OddBird brand.\n/// @group fonts\n/// @preview font-specimen; key: body; show: regular, italic, bold, bold italic\n/// @link http://oddbird.net/accoutrement-type/docs/\n///   Accoutrement Type\n$body-font: (\n  'name': 'freight-text-pro',\n  'stack': ('Baskerville', 'Palatino', 'Cambria', 'Georgia', serif),\n  'source': 'https://typekit.com/fonts/freight-text',\n);\n\n@include add-font('body', $body-font);\n@include herman-add('font', 'body', $body-font);\n\n\n// Alt Font\n// --------\n/// Freight Sans Pro provides a sans-serif alternative,\n/// still in the same family as our primary font.\n/// @group fonts\n/// @preview font-specimen; key: alt; show: regular, italic, bold, bold italic\n/// @link http://oddbird.net/accoutrement-type/docs/\n///   Accoutrement Type\n$alt-font: (\n  'name': 'freight-sans-pro',\n  'stack': ('Helvetica Neue', 'Helvetica', 'Arial', sans-serif),\n  'source': 'https://typekit.com/fonts/freight-sans',\n);\n\n@include add-font('alt', $alt-font);\n@include herman-add('font', 'alt', $alt-font);\n","// Color Utilities\n// ===============\n\n\n// Tint\n// ----\n/// Mix a color with `white` to get a lighter tint.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of white to mix in.\n///   Higher percentages will result in a lighter tint.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function tint(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#fff, $color, $percentage);\n}\n\n\n// Shade\n// -----\n/// Mix a color with `black` to get a darker shade.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of black to mix in.\n///   Higher percentages will result in a darker shade.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function shade(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#000, $color, $percentage);\n}\n\n\n// Get Function\n// ------------\n/// Get a first-class function in Sass 3.5+,\n/// or the function name string (unchanged)\n/// in older Sass versions.\n/// This is safe to use internally,\n/// as it allows users to pass in\n/// either a string, or a previously-captured function.\n///\n/// @access private\n///\n/// @param {String | Function} $function -\n///   The name (string) of a function,\n///   or the function to be called.\n/// @return {String | Function} -\n///   Returns a first-class function in Sass 3.5+,\n///   or the function name string in older Sass versions.\n@function _ac-color-get-function(\n  $function\n) {\n  $type: type-of($function);\n  $local: ('tint', 'shade');\n\n  @if ($type == 'function') {\n    @return $function;\n  } @else if ($type == 'string') and function-exists('get-function') {\n    @if index($local, $function) {\n      @return get-function($function);\n    }\n\n    @error '[#{$type}] `#{$function}` must be a first-class function';\n  }\n\n  @return $function;\n}\n","// Scale Config\n// ============\n\n\n/// Sizes are contained in Sass maps,\n/// and accessed using OddBird’s Accoutrement.\n/// @link http://oddbird.net/accoutrement-scale/\n///   Accoutrement Scale\n\n\n// Ratios\n// ------\n/// @group scale\n$ratios: (\n  'text-ratio': 1.4,\n);\n\n@include herman-add('ratios', 'ratios', $ratios, 'ratio');\n\n\n// Text Sizes\n// ----------\n/// @group scale\n/// @preview sizes;\n$text-sizes: (\n  'root': 24px,\n  'responsive': calc(100% + 0.675vw),\n  'reset': 1rem,\n\n  'h1': calc(2rem + 1.5vw),\n  'h2': 'feature',\n\n  'boiler': 1rem ('text-ratio': -0.5),\n  'feature': calc(1rem + 0.75vw),\n);\n\n$sizes: map-merge($sizes, $text-sizes);\n@include herman-add('sizes', 'text-sizes', $text-sizes, 'size');\n\n\n// Spacing Sizes\n// -------------\n/// @group scale\n/// @preview sizes; style: ruler\n$spacing-sizes: (\n  'rhythm': 'root' ('text-ratio': 1, 'convert-units': 'rem'),\n  'gutter': 'rhythm',\n  'double-gutter': 'gutter' ('times': 2),\n  'shim': 'gutter' ('divide': 2),\n  'shim-plus': 'shim' ('times': 1.5),\n  'half-shim': 'shim' ('divide': 2),\n  'quarter-shim': 'shim' ('divide': 4),\n  'spacer': calc(%s + %s) ('shim', 3vmin),\n);\n\n$sizes: map-merge($sizes, $spacing-sizes);\n@include herman-add('sizes', 'spacing-sizes', $spacing-sizes, 'size');\n\n\n// Page Sizes\n// ----------\n/// @group scale\n/// @preview sizes; style: output-only\n$page-sizes: (\n  'page': 28rem,\n);\n\n$sizes: map-merge($sizes, $page-sizes);\n@include herman-add('sizes', 'page-sizes', $page-sizes, 'size');\n\n\n// Pattern Sizes\n// -------------\n/// @group scale\n/// @preview sizes; style: output-only\n$pattern-sizes: (\n  // as needed…\n);\n\n$sizes: map-merge($sizes, $pattern-sizes);\n@include herman-add('sizes', 'pattern-sizes', $pattern-sizes, 'size');\n","// Unit Helpers\n// ------------\n\n\n// Get PX [function]\n// -----------------\n/// If a value can be converted to px by Sass, do it.\n///\n/// @access private\n///\n/// @param {number} $length -\n///   The number to be converted to px if comparable.\n/// @return {number | false} -\n///   Either the `px` value of the converted `$length` or `false`.\n@function _get-px(\n  $length\n) {\n  @return if(comparable($length, 1px), 0px + $length, false);\n}\n\n\n// Get Number [function]\n// ---------------------\n/// Get a `0`-value for any absolute unit.\n///\n/// @access private\n///\n/// @param {string} $unit -\n///   The unit to return as a number.\n/// @return {number | false} -\n///   Either the `0` value of a unit or `false`.\n@function _get-number(\n  $unit,\n  $relative: false\n) {\n  $_absolute: (\n    'in': 0in,\n    'mm': 0mm,\n    'cm': 0cm,\n    'pt': 0pt,\n    'pc': 0pc,\n    'px': 0px,\n  );\n\n  $_relative: (\n    'em': 0em,\n    'rem': 0rem,\n    '%': 0%,\n    'ex': 0ex,\n    'ch': 0ch,\n    'vw': 0vw,\n    'vh': 0vh,\n    'vmin': 0vmin,\n    'vmax': 0vmax,\n    'fr': 0fr,\n  );\n\n  @if $relative {\n    @return map-get($_absolute, $unit) or map-get($_relative, $unit);\n  }\n\n  @return map-get($_absolute, $unit);\n}\n\n\n// Convert Units [function]\n// ------------------------\n/// Convert lengths between comparable units.\n/// You can also convert to `browser-ems`,\n/// relative to the browser default rather than the site root –\n/// useful for media-quesries.\n///\n/// @group units\n///\n/// @param {length | string} $length -\n///   The length or named size to be converted.\n/// @param {string} $to-unit -\n///   The desired units to convert to.\n///   Some units (`ch`, `vw`, `vh`, `vmin`, `vmax`) cannot be converted.\n/// @param {length | string} $from-context ['root' setting or 16px] -\n///   When converting from relative units,\n///   the absolute length (in px) to which $length refers -\n///   e.g. for `$lengths` in em units, would normally be the\n///   font-size of the current element.\n/// @param {length | string} $to-context [$from-context] -\n///   For converting *to* relative units,\n///   the absolute length in px to which the output value will refer.\n///   Defaults to the same as `$from-context`, since it is rarely needed.\n@function convert-units(\n  $length,\n  $to-unit,\n  $from-context: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE,\n  $to-context: $from-context\n) {\n  $_convertable: ('in', 'mm', 'cm', 'pt', 'pc', 'px', 'em', 'rem', '%', 'ex');\n\n  $length: _ac-scale-get-size($length);\n  $from-context: _ac-scale-get-size($from-context);\n  $to-context: _ac-scale-get-size($to-context);\n\n  $from-unit: unit($length);\n\n  // Special conversion for browser-default ems (needed in media-queries)\n  @if ($to-unit == 'browser-ems') {\n    $size: convert-units($length, 'px', $from-context);\n    @return $size / $_BROWSER-DEFAULT-FONT-SIZE * 1em;\n  }\n\n  // No conversion needed\n  @if ($from-unit == $to-unit) {\n    @return $length;\n  }\n\n  @if ($from-unit == '') {\n    @return _get-number($to-unit, 'allow-relative') + $length;\n  } @else if ($to-unit == '') {\n    @return $length / ($length * 0 + 1);\n  }\n\n  // Warn and escape when units are not convertable\n  @each $units in ($from-unit, $to-unit) {\n    @if not index($_convertable, $units) {\n      @warn '`#{$units}` units can not be reliably converted; Returning original value.';\n      @return $length;\n    }\n  }\n\n  // Optomize comparable (non-relative) units\n  $absolute-output: _get-number($to-unit);\n\n  @if $absolute-output and comparable($length, $absolute-output)  {\n    @return $absolute-output + $length;\n  }\n\n  // Establish relative context\n  $root-size: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE;\n  $root-size: _ac-scale-get-size($root-size);\n  $root-size: _get-px($root-size);\n  $from-context: _get-px($from-context);\n  $to-context: _get-px($to-context);\n\n  // Context values must be in px\n  @if (not $from-context) or (not $to-context) {\n    @error 'Context paremeters must resolve to a value in pixel units.';\n  }\n\n  // Convert relative length to pixels\n  $px-length: _get-px($length) or $length;\n  $from-unit: unit($px-length);\n\n  // Convert relative units using the from-context parameter.\n  @if $from-unit == 'em' {\n    $px-length: $length * $from-context / 1em;\n  } @else if $from-unit == 'rem' {\n    $px-length: $length * $root-size / 1rem;\n  } @else if $from-unit == '%' {\n    $px-length: $length * $from-context / 100%;\n  } @else if $from-unit == 'ex'  {\n    $px-length: $length * $from-context / 2ex;\n  }\n\n  // Convert length in pixels to the output unit\n  @if $absolute-output {\n    @return $absolute-output + $px-length;\n  } @else if $to-unit == 'em' {\n    @return $px-length * 1em / $to-context;\n  } @else if $to-unit == 'rem' {\n    @return $px-length * 1rem / $root-size;\n  } @else if $to-unit == '%' {\n    @return $px-length * 100% / $to-context;\n  } @else if $to-unit == 'ex' {\n    @return $px-length * 2ex / $to-context;\n  }\n\n  @error 'Failed to convert #{$length} into #{$to-units}.';\n}\n","// Color Configuration\n// ===================\n\n\n// Brand Colors\n// ------------\n/// The brand is defined by our primary brand blue,\n/// along with secondary pink and orange base colors.\n/// @group color\n/// @preview color-palette\n/// @type Map\n$brand-colors: (\n  'brand-blue': hsl(195, 52%, 31%),\n  'brand-orange': hsl(24, 100%, 62%),\n  'brand-pink': hsl(330, 100%, 45%),\n);\n\n@include add-colors($brand-colors);\n@include herman-add('colors', 'brand-colors', $brand-colors, 'color');\n\n\n// Contrast Colors\n// ---------------\n/// The light and dark contrast colors act as\n/// the high and low range of our palette.\n/// @group color\n/// @preview color-palette\n/// @type Map\n/// @link http://oddbird.net/accoutrement-color/docs/\n///   Accoutrement Colors\n$contrast-colors: (\n  'contrast-light': #eee,\n  'contrast-dark': 'brand-blue' ('shade': 40%),\n);\n\n@include add-colors($contrast-colors);\n@include herman-add('colors', 'contrast-colors', $contrast-colors, 'color');\n\n\n// Pattern Colors\n// --------------\n/// Re-usable color patterns for application in different components.\n/// @group color\n/// @preview color-palette\n/// @type Map\n$pattern-colors: (\n  'text': 'contrast-dark',\n  'background': 'contrast-light',\n  'overlay': 'background' ('rgba': 0.96),\n  'border': 'brand-blue' ('tint': 65%),\n\n  'action': 'brand-pink' ('shade': 25%),\n  'action-hover': 'brand-blue',\n\n  'field-chill': 'brand-blue',\n  'field-attention': 'action',\n\n  'page-title': 'action-hover',\n  'callout': 'brand-blue' ('tint': 90%),\n);\n\n@include add-colors($pattern-colors);\n@include herman-add('colors', 'pattern-colors', $pattern-colors, 'color');\n","// Math Helpers\n// ============\n\n\n// Plus\n// ----\n/// Add two values together in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are adding to\n/// @param {string | length} $size2 -\n///   The name or length of the size being added\n/// @return {number} -\n///   The calculated results of adding\n///   `$size1` and `$size2`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'margin': 14px,\n///     'spacer': 'text' ('plus': 'margin'),\n///   );\n@function plus(\n  $size1,\n  $size2\n) {\n  @return size($size1) + size($size2);\n}\n\n\n// Add\n// ---\n/// @alias plus\n/// @group math\n@function add(\n  $size1,\n  $size2\n) {\n  @return plus($size1, $size2);\n}\n\n\n\n// Minus\n// -----\n/// Subtract one value from another in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are subtracting from\n/// @param {string | length} $size2 -\n///   The name or length of the size to subtract\n/// @return {number} -\n///   The calculated results of subtracting\n///   `$size2` from `$size1`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'margin': 14px,\n///     'shim': 'text' ('minus': 'margin'),\n///   );\n@function minus(\n  $size1,\n  $size2\n) {\n  @return size($size1) - size($size2);\n}\n\n\n// Subtract\n// --------\n/// @alias minus\n/// @group math\n@function subtract(\n  $size1,\n  $size2\n) {\n  @return minus($size1, $size2);\n}\n\n\n// Times\n// -----\n/// Multiplty two values in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are multiplying\n/// @param {string | length} $size2 -\n///   The name or length of the size to use as a multiple\n/// @return {number} -\n///   The calculated results of multiplying\n///   `$size1` by `$size2`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'double': 'text' ('times': 2),\n///   );\n@function times(\n  $size1,\n  $size2\n) {\n  @return size($size1) * size($size2);\n}\n\n\n// Multiply\n// --------\n/// @alias times\n/// @group math\n@function multiply(\n  $size1,\n  $size2\n) {\n  @return times($size1, $size2);\n}\n\n\n// Divide\n// ------\n/// Divide two values in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are dividing\n/// @param {string | length} $size2 -\n///   The name or length of the size to use as a division\n/// @return {number} -\n///   The calculated results of dividing\n///   `$size1` by `$size2`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'half': 'text' ('divide': 2),\n///   );\n@function divide(\n  $size1,\n  $size2\n) {\n  @return size($size1) / size($size2);\n}\n","// Header Layout\n// =============\n\n\n[data-layout='header'],\n[data-layout='nav'] {\n  a {\n    text-decoration: none;\n  }\n}\n\n\n[data-layout='header'] {\n  font-size: size('h1');\n  line-height: 1em;\n  margin-bottom: -0.25em;\n  text-align: center;\n\n  a {\n    &:link,\n    &:visited {\n      color: color('text');\n    }\n\n    &:focus,\n    &:hover,\n    &:active {\n      color: color('action');\n    }\n  }\n\n  .amp {\n    display: inline-block;\n    font-size: 1.5em;\n    margin-left: -0.125em;\n    vertical-align: middle;\n  }\n}\n","// Nav Layout\n// ==========\n\n\n[data-layout='nav'] {\n  padding-bottom: size('gutter');\n  text-align: center;\n}\n\n\n[data-nav] {\n  display: inline-block;\n  font-size: size('boiler');\n  font-style: italic;\n  padding: size('quarter-shim') size('shim');\n\n  & + & {\n    margin-left: size('h1');\n  }\n}\n\n\n@each $item in $nav {\n  [data-location='#{$item}'] {\n    [data-nav='#{$item}'] {\n      color: color('text');\n      text-decoration: underline;\n    }\n  }\n}\n","// Base API\n// ========\n\n\n// Size [function]\n// ---------------\n/// Access a named size in your `$sizes` map,\n/// using any comparable units.\n///\n/// @group sizes\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`),\n///   or a `calc(%s + %s) ('root', 'rhythm')` recipie\n///   for building `calc` values.\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {vararg} $unit... -\n///   The desired unit for the output (e.g. `px` or `rem`),\n///   and any other arguments required for the conversion.\n/// @return {length} -\n///   The calculated length, in the requested units.\n@function size(\n  $size,\n  $unit...\n) {\n  $size: _ac-scale-get-size($size);\n  $size: if(length($unit) > 0, convert-units($size, $unit...), $size);\n\n  @return $size;\n}\n\n\n// Negative [function]\n// -------------------\n/// Return the negative value of any length,\n/// in comparable units.\n///\n/// @group sizes\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`).\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {vararg} $unit... -\n///   The desired unit for the output (e.g. `px` or `rem`),\n///   and any other arguments required for the conversion.\n/// @return {length} -\n///   The calculated negative length, in the requested units.\n@function negative(\n  $size,\n  $unit...\n) {\n  @return 0 - size($size, $unit...);\n}\n\n\n// Scale [function]\n// ----------------\n/// Retrieve a scale ratio by name\n/// from either the `$_DEFAULT-RATIOS`\n/// or user `$ratios` configurations.\n///\n/// @group sizes\n///\n/// @param {string | number} $ratio -\n///   The key-name or value of a ratio\n/// @return {number} -\n///   The numeric value of a ratio\n/// @example scss\n///   /* Octave: #{ratio('octave')} */\n///   /* Fifth: #{ratio('fifth')} */\n@function ratio(\n  $ratio\n) {\n  $_ratio-options: map-merge($_DEFAULT-RATIOS, $ratios);\n  $_new-ratio: map-get($_ratio-options, $ratio) or $ratio;\n\n  @if ($ratio != $_new-ratio) and map-has-key($_ratio-options, $_new-ratio) {\n    $_new-ratio: ratio($_new-ratio);\n  }\n\n  @return $_new-ratio;\n}\n\n\n// Square [mixin]\n// --------------\n/// Create a square by setting equal CSS `height` and `width` properties\n/// with the given size & unit value.\n///\n/// @group sizes\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`).\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {vararg} $unit... -\n///   The desired unit for the output (e.g. `px` or `rem`),\n///   and any other arguments required for the conversion.\n/// @output -\n///   Equal CSS height and width properties,\n///   set to the given size and units.\n@mixin square(\n  $size,\n  $unit...\n) {\n  $size: size($size, $unit...);\n\n  height: $size;\n  width: $size;\n}\n\n\n\n// Get Size\n// --------\n/// Access a named size in your `$sizes` map.\n///\n/// @access private\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`),\n///   or a `calc(%s + %s) ('root', 'rhythm')` recipie\n///   for building `calc` values.\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @throw -\n///   The calculated value is not a valid CSS length.\n/// @return {length} -\n///   The calculated length\n@function _ac-scale-get-size(\n  $size\n) {\n  // Parse arguments\n  $size: map-get($sizes, $size) or $size;\n  $base: nth($size, 1);\n  $adjust: if(length($size) > 1, nth($size, 2), null);\n\n  // Recursive check\n  $size: if(map-has-key($sizes, $base), _ac-scale-get-size($base), $base);\n\n  // Adjustments\n  $adjust-type: type-of($adjust);\n  $calc: (type-of($size) == 'string') and (str-slice($size, 1, 5) == 'calc(');\n\n  @if (not $calc) and ($adjust-type == 'map') {\n    @each $key, $value in $adjust {\n      $size: _ac-scale-adjust-size($size, $key, $value...);\n    }\n  } @else if $calc and ($adjust-type == 'list') {\n    $values: ();\n\n    @each $value in $adjust {\n      $values: append($values, _ac-scale-get-size($value));\n    }\n\n    $size: _ac-interpolate($base, $values...);\n  }\n\n\n  // Validation\n  @if (type-of($size) == 'number') or $calc {\n    @return $size;\n  }\n\n  @error '#{$size} is not a valid length for CSS.';\n}\n\n\n\n// Adjust Size\n// -----------\n/// Calculate ratio, linear, or arbitrary adjustments\n/// to a base size.\n///\n/// @access private\n///\n/// @param {number} $size -\n///   The original size to perform adjusments on\n/// @param {string | number} $key -\n///   The adjustment to perform,\n///   given as either a numeric ratio,\n///   named ratio keyword,\n///   or function name to call.\n/// @param {arglist} $value… -\n///   Any required arguments,\n///   such as the number of times to apply a ratio,\n///   or additional information to be passed to a function.\n/// @return {number} -\n///   Results of the adjustment.\n@function _ac-scale-adjust-size(\n  $size,\n  $key,\n  $value...\n) {\n  $ratio: ratio($key);\n  $value: if(length($value) == 1, nth($value, 1), $value);\n\n  @if $ratio == 'linear' {\n    @return $size * $value;\n  } @else if (type-of($ratio) == 'number') {\n    $multiplier: _acs-pow($ratio, $value);\n    @return $size * $multiplier;\n  } @else if (type-of($key) == 'function') or function-exists($key) {\n    $function: _ac-scale-get-function($key);\n    $args: if($value, join($size, $value), $size);\n    @return call($function, $args...);\n  }\n\n  @error '#{$key} is not a valid ratio or function for adusting sizes.';\n}\n\n\n"]}